name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 pytest-mock

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=envChatWS,venv,.git,__pycache__
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=envChatWS,venv,.git,__pycache__

    - name: Test with pytest
      env:
        GROQ_API_KEY: test-api-key
        TESTING: true
      run: |
        pytest --cov=app --cov=tests --cov-report=xml --cov-report=term-missing -v

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: false

  docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/chatbotws:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/chatbotws:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [test, docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    environment: production

    steps:
    - name: Deploy notification
      run: |
        echo "ðŸš€ Deployment triggered for commit ${{ github.sha }}"
        # Complete deployment example for AWS ECS:
        # - name: Deploy to AWS ECS
        #   run: |
        #     aws ecs update-service --cluster chatbot-cluster --service chatbot-service --force-new-deployment
        # 
        # Complete deployment example for Kubernetes:
        # - name: Deploy to Kubernetes
        #   run: |
        #     kubectl set image deployment/chatbot-deployment chatbot=${{ secrets.DOCKERHUB_USERNAME }}/chatbotws:${{ github.sha }}
        #     kubectl rollout status deployment/chatbot-deployment